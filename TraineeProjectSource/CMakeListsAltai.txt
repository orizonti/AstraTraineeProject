cmake_minimum_required(VERSION 3.14)
project(TestClionQt)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOUIC_SEARCH_PATHS ./ui_files)
set(UNICODE 1)
set(QT_NO_DEBUG 1)
set(NDEBUG 1)
set(QT_CORE_LIB 1)
set(QT_GUI_LIB 1)
set(QT_NETWORK_LIB 1)
set(QT_SERIALPORT_LIB 1)
set(QT_WIDGETS_LIB 1)
set(QT_PRINTSUPPORT_LIB 1)


set(CMAKE_INCLUDE_CURRENT_DIR ON)

if(EXISTS "/home/broms/PROGRAM_LIBRARY")
  set(LIBRARY_DIR "/home/broms/PROGRAM_LIBRARY")
endif()
if(EXISTS "/home/broms/PROGRAM_LIBRARY")
  set(LIBRARY_DIR "/home/broms/PROGRAM_LIBRARY")
endif()
if(EXISTS "/mnt/d/PROGRAM_LIBRARY/linux")
  set(LIBRARY_DIR "/mnt/d/PROGRAM_LIBRARY/linux")
endif()

message("LIBRARIES PATH: "${LIBRARY_DIR})

set(CMAKE_PREFIX_PATH "${LIBRARY_DIR}/NN_LIBRARY/libtorch/")
find_package(Torch REQUIRED)

if(EXISTS "${LIBRARY_DIR}/QT5.15.2/5.15.2/gcc_64/")
    set(CMAKE_PREFIX_PATH "${LIBRARY_DIR}/QT5.15.2/5.15.2/gcc_64/")
endif()

find_package(Qt5 COMPONENTS Widgets Network Core SerialPort PrintSupport REQUIRED)


find_package(OpenCV REQUIRED )
message("OPENCV LIBS "${OpenCV_LIBS})

add_subdirectory(rotate_optimization)
include_directories("${PROJECT_SOURCE_DIR}/rotate_optimization")

include_directories("/opt/nf_npkspp/ibpa.08072-01_mppd_driver/include/headers/")
include_directories("/usr/local/include/opencv4")
include_directories("./gui_sources")

include_directories("${LIBRARY_DIR}/NN_LIBRARY/libtorch/include")
include_directories("${LIBRARY_DIR}/NN_LIBRARY/libtorch/include/torch/csrc/api/include")
include_directories("${LIBRARY_DIR}/MATH_LIBRARY")
include_directories("${LIBRARY_DIR}/COMMON_LIBRARRY/boost_1_68_0/boost_1_68_0")
include_directories("${LIBRARY_DIR}/MATH_LIBRARY/")
include_directories("${LIBRARY_DIR}/NN_LIBRARY/onnxruntime/include/")
link_directories("${LIBRARY_DIR}/NN_LIBRARY/onnxruntime/lib/")

if(EXISTS "/home/broms/DEVELOPMENT/AstraTraineeProject/TraineeProjectSource")
include_directories("/home/broms/DEVELOPMENT/AstraTraineeProject/TraineeProjectSource")
endif()

if(EXISTS "/home/broms/DEVELOPMENT/AstraTraineeProject/TraineeProjectSource")
include_directories("/home/broms/DEVELOPMENT/AstraTraineeProject/TraineeProjectSource")
endif()


#include_directories("../${PROJECT_SOURCE_DIR}")
add_executable (TraineeProjectExecutable
        "./ui_files/aimingblockwindow.ui"
        "./ui_files/cameracontrolwindow.ui"
        "./ui_files/camerawindow.ui"
        "./ui_files/engineblockwindow.ui"
        "./ui_files/enginecontrolwindow.ui"
        "./ui_files/RemoteAimingWindowControl.ui"
        "./ui_files/graphicswindow.ui"
        "./ui_files/imageprocessingdisplaywindow.ui"
        "./ui_files/imageprocessingwindow.ui"
        "./ui_files/kalmanwindow.ui"
        "./ui_files/laserblockwindow.ui"
        "./ui_files/mainblockwindow.ui"
        "./ui_files/mainwindowqclass.ui"
        "./ui_files/PIDWIndow.ui"
        "./ui_files/PilotLaserWindow.ui"
        "./ui_files/windowsinussource.ui"

        "./gui_sources/aimingblockwindow.cpp"
        "./gui_sources/engineblockwindow.cpp"
        "./gui_sources/cameracontrolwindow.cpp"
        "./gui_sources/camerawindow.cpp"
        "./gui_sources/graphicswindow.cpp"
        "./gui_sources/imageprocessingdisplaywindow.cpp"
        "./gui_sources/imageprocessingwindow.cpp"
        "./gui_sources/mainblockwindow.cpp"
        "./gui_sources/mainwindowqclass.cpp"
        "./gui_sources/kalmanwindow.cpp"
        "./gui_sources/laserblockwindow.cpp"
        "./gui_sources/enginecontrolwindow.cpp"
        "./gui_sources/graphicwidgetnode.cpp"
        "./gui_sources/PIDWIndow.cpp"
        "./gui_sources/PilotLaserWindow.cpp"
        "./gui_sources/windowsinussource.cpp"
        "./gui_sources/AdjustableWidget.cpp"
        "./gui_sources/RemoteAimingWindowControl.cpp"
        "./gui_sources/labelimage.cpp"
        "./gui_sources/link_line.cpp"
        "./gui_sources/node.cpp"

        "ui_PIDWindow.h"
        "main.cpp"
        "AimingClass.cpp"
        "AirSystemClass.cpp"
        "CameraInterfaceClass.cpp"
        "ChillSystemClass.cpp"
        "LaserCommonInterface.cpp"
        "DigitalClock.cpp"
        "EngineControlClass.cpp"
        "EngineInterfaceClass.cpp"
        "RemoteControlClass.cpp"
        "ImageProcessingClass.cpp"
        "KLPInterfaceClass.cpp"
        "LaserControlClass.cpp"
        "LaserPilotInterfaceClass.cpp"
        "LaserPointerInterface.cpp"
        "LaserPilotInterface.cpp"
        "main.cpp"
        "maincontrollerqclass.cpp"

        "PassTwoCoordClass.cpp"
        "PIDClass.cpp"
        "qcustomplot.cpp"
        "SinusGeneratorClass.cpp"
        "stdafx.cpp"
        "tcpclientengine.cpp"
        "TransformCoordClass.cpp"
        "mppd_wrap.cpp"
        "qcustomplot.h"
        "KalmanFilterClass.cpp"
        "KalmanFilterClass.h"
        )
message("ROTATE LIB: ${CMAKE_CURRENT_SOURCE_DIR}/build/libRotateOptimization.a")
set(NN_LIBRARY_DIR "/home/broms/PROGRAM_LIBRARY/NN_LIBRARY")
target_link_libraries(TraineeProjectExecutable ${OpenCV_LIBS})
target_link_libraries(TraineeProjectExecutable Qt5::Widgets)
target_link_libraries(TraineeProjectExecutable Qt5::Network)
target_link_libraries(TraineeProjectExecutable Qt5::Core)
target_link_libraries(TraineeProjectExecutable Qt5::SerialPort)
target_link_libraries(TraineeProjectExecutable Qt5::PrintSupport)
target_link_libraries(TraineeProjectExecutable onnxruntime.so)

message("LIBROTATE:  ${CMAKE_CURRENT_SOURCE_DIR}/build/rotate_optimization/libRotateOptimization.so")
message("LIBROTATE:  /home/broms/DEVELOPMENT/AstraTraineeProject/build/TraineeProjectSource/rotate_optimization/libRotateOptimization.so")
target_link_libraries(TraineeProjectExecutable "${CMAKE_CURRENT_SOURCE_DIR}/build/rotate_optimization/libRotateOptimization.so")
target_link_libraries(TraineeProjectExecutable "${NN_LIBRARY_DIR}/libtorch/lib/libtorch_cpu.so")
target_link_libraries(TraineeProjectExecutable "${NN_LIBRARY_DIR}/libtorch/lib/libtorch.so")
target_link_libraries(TraineeProjectExecutable "${NN_LIBRARY_DIR}/libtorch/lib/libc10.so")
#target_link_libraries(TraineeProjectExecutable "/home/broms/PROGRAM_LIBRARY/NN_LIBRARY/libtorch/lib/libtorch_cpu.so")
#target_link_libraries(TraineeProjectExecutable "/home/broms/PROGRAM_LIBRARY/NN_LIBRARY/libtorch/lib/libtorch.so")
#target_link_libraries(TraineeProjectExecutable "/home/broms/PROGRAM_LIBRARY/NN_LIBRARY/libtorch/lib/libc10.so")

#target_link_libraries(TraineeProjectExecutable "/mnt/d/DEVELOPMENT/PROJECTS/ASTRA_PROJECT/AstraTraineeProject/build/TraineeProjectSource/rotate_optimization/libRotateOptimization.so")
#target_link_libraries(TraineeProjectExecutable "/mnt/d/PROGRAM_LIBRARY/linux/NN_LIBRARY/libtorch/lib/libtorch_cpu.so")
#target_link_libraries(TraineeProjectExecutable "/mnt/d/PROGRAM_LIBRARY/linux/NN_LIBRARY/libtorch/lib/libtorch.so")
#target_link_libraries(TraineeProjectExecutable "/mnt/d/PROGRAM_LIBRARY/linux/NN_LIBRARY/libtorch/lib/libc10.so")


#set(Qt5Core_DIR "${CMAKE_PREFIX_PATH}/Qt5Core")
#set(Qt5Gui_DIR "${CMAKE_PREFIX_PATH}/Qt5Gui")
#set(Qt5Network "${CMAKE_PREFIX_PATH}/Qt5Network")
#set(Qt5PrintSupport "${CMAKE_PREFIX_PATH}/Qt5PrintSupport")
#set(Qt5SerialPort "${CMAKE_PREFIX_PATH}/Qt5SerialPort")
#set(Qt5Widgets "${CMAKE_PREFIX_PATH}/Qt5Widgets")
#set(Qt5 "${CMAKE_PREFIX_PATH}/Qt5")

#set(QtIncludeCore "${CMAKE_PREFIX_PATH}/include/QtCore")
#set(QtIncludeGui "${CMAKE_PREFIX_PATH}/include/QtGui")
#set(QtIncludeWidgets "${CMAKE_PREFIX_PATH}/include/QtWidgets")
#set(QtIncludeNetwork "${CMAKE_PREFIX_PATH}/include/QtNetwork")
#set(QtIncludeSerialPort "${CMAKE_PREFIX_PATH}/include/QtSerialPort")
#set(QtIncludeConcurrent "${CMAKE_PREFIX_PATH}/include/QtConcurrent")

#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeSerialPort}/QSerialPort)
#
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/qobject.h)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/qdebug.h)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/qtimer.h)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QTime)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/qthread.h)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/qbytearray.h)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/qdatastream.h)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QTimer)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QString)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QList)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QPair)
#
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeNetwork}/QTcpSocket)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeNetwork}/QHostAddress)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeNetwork}/QTcpServer)
#
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeGui}/qimage.h)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeGui}/qpixmap.h)
#
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QWidget)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QLCDNumber)
#
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QGraphicsProxyWidget)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QGraphicsScene)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QWidget)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QSpinBox)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QDoubleSpinBox)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QLabel)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QGraphicsItem)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QGraphicsScene)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeWidgets}/QtWidgets)
#
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeGui}/QPainterPath)
#
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QSettings)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QFile)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QMutex)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QWaitCondition)
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QQueue)
#
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeConcurrent}/QtConcurrent)
#
#
#target_precompile_headers(TestCmakeProject PRIVATE ${QtIncludeCore}/QtMath)
#target_precompile_headers(TestCmakeProject PRIVATE ${IncludeBoost}/boost/crc.hpp)
#target_precompile_headers(TestCmakeProject PRIVATE qcustomplot.h)
#
#set(IncludeMath "/home/broms/COMMON_DIR/PROGRAM_LIBRARY/MATH_LIBRARY")
#
#target_precompile_headers(TestCmakeProject PRIVATE ${IncludeMath}/Eigen/Eigen)
#target_precompile_headers(TestCmakeProject PRIVATE ${IncludeMath}/Eigen/Dense)
#target_precompile_headers(TestCmakeProject PRIVATE ${IncludeMath}/Eigen/src/Core/Matrix.h)
#target_precompile_headers(TestCmakeProject PRIVATE ${IncludeMath}/Eigen/src/Core/Matrix.h)
#
##target_precompile_headers(TestCmakeProject PRIVATE ${IncludeTorch}/torch/torch.h)
#
##target_precompile_headers(TestCmakeProject PRIVATE iostream.h)
##target_precompile_headers(TestCmakeProject PRIVATE string.h)
##target_precompile_headers(TestCmakeProject PRIVATE vector.h)
##target_precompile_headers(TestCmakeProject PRIVATE math.h)
##target_precompile_headers(TestCmakeProject PRIVATE chrono.h)

# TODO: Добавьте тесты и целевые объекты, если это необходимо.
